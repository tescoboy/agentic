"""Configuration management for AdCP Demo Orchestrator."""

import os
from typing import Optional

from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()


class Settings:
    """Application settings loaded from environment variables."""

    def __init__(self) -> None:
        self.gemini_api_key: Optional[str] = os.getenv("GEMINI_API_KEY")
        self.default_model: str = os.getenv("DEFAULT_MODEL", "gemini-1.5-pro")
        self.port: int = int(os.getenv("PORT", "8000"))
        self.database_url: str = os.getenv("DATABASE_URL", "sqlite:///./adcp_demo.db")
        
        # Orchestrator configuration
        self.orch_timeout_ms_default: int = int(os.getenv("ORCH_TIMEOUT_MS_DEFAULT", "8000"))
        self.orch_concurrency: int = int(os.getenv("ORCH_CONCURRENCY", "8"))
        self.cb_failure_threshold: int = int(os.getenv("CB_FAILURE_THRESHOLD", "3"))
        self.cb_ttl_seconds: int = int(os.getenv("CB_TTL_SECONDS", "60"))
        self.service_base_url: str = os.getenv("SERVICE_BASE_URL", "http://localhost:8000")

    def missing_ai_key_warning(self) -> str:
        """Return a helpful warning message if AI key is missing."""
        if not self.gemini_api_key:
            return (
                "WARNING: GEMINI_API_KEY not set. "
                "AI features will not work. "
                "Set GEMINI_API_KEY in your .env file."
            )
        return ""

    def is_ai_configured(self) -> bool:
        """Check if AI provider is properly configured."""
        return bool(self.gemini_api_key)


# Global settings instance
settings = Settings()
